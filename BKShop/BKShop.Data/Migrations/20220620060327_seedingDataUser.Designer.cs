// <auto-generated />
using System;
using BKShop.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BKShop.Data.Migrations
{
    [DbContext(typeof(BKShopDbContext))]
    [Migration("20220620060327_seedingDataUser")]
    partial class seedingDataUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BKShop.Data.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SamSung"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Oppo"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Oneplus"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Nokia"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Realme"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Xiaomi"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Vivo"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Khác"
                        });
                });

            modelBuilder.Entity("BKShop.Data.Entities.Cart", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ProductID", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("BKShop.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Điện thoại"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Máy tính bảng"
                        },
                        new
                        {
                            Id = 3,
                            Name = "LapTop"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Đồng hồ"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sạc dự phòng"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Tai nghe"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Loa"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Cường lực"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Cáp sạc"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Ốp lưng"
                        });
                });

            modelBuilder.Entity("BKShop.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "TPHCM",
                            CreatedDate = new DateTime(2022, 5, 21, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(2021, 5, 21, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            Phone = "0123456789",
                            Status = 4,
                            UserId = new Guid("bff91064-dc92-421e-a233-d1080f630928")
                        },
                        new
                        {
                            Id = 2,
                            Address = "TPHCM",
                            CreatedDate = new DateTime(2022, 5, 22, 13, 41, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(2021, 5, 22, 10, 50, 0, 0, DateTimeKind.Unspecified),
                            Phone = "0123456789",
                            Status = 4,
                            UserId = new Guid("bff91064-dc92-421e-a233-d1080f630928")
                        },
                        new
                        {
                            Id = 3,
                            Address = "TPHCM",
                            CreatedDate = new DateTime(2022, 5, 22, 15, 23, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(2021, 5, 23, 9, 34, 0, 0, DateTimeKind.Unspecified),
                            Phone = "0123456789",
                            Status = 4,
                            UserId = new Guid("bff91064-dc92-421e-a233-d1080f630928")
                        },
                        new
                        {
                            Id = 4,
                            Address = "TPHCM",
                            CreatedDate = new DateTime(2022, 5, 23, 12, 11, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(2021, 5, 23, 16, 23, 0, 0, DateTimeKind.Unspecified),
                            Phone = "0123456789",
                            Status = 4,
                            UserId = new Guid("bff91054-dc92-421e-a233-d1080f630928")
                        },
                        new
                        {
                            Id = 5,
                            Address = "TPHCM",
                            CreatedDate = new DateTime(2022, 5, 24, 12, 11, 0, 0, DateTimeKind.Unspecified),
                            Phone = "0123456789",
                            Status = 2,
                            UserId = new Guid("bff91064-dc92-421e-a233-d1080f630928")
                        },
                        new
                        {
                            Id = 6,
                            Address = "TPHCM",
                            CreatedDate = new DateTime(2022, 5, 24, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Phone = "0123456789",
                            Status = 0,
                            UserId = new Guid("bff91054-dc92-421e-a233-d1080f630928")
                        });
                });

            modelBuilder.Entity("BKShop.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ProductId = 1,
                            Amount = 2,
                            Price = 10000000m
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 2,
                            Amount = 1,
                            Price = 10000000m
                        },
                        new
                        {
                            OrderId = 3,
                            ProductId = 3,
                            Amount = 1,
                            Price = 10000000m
                        },
                        new
                        {
                            OrderId = 3,
                            ProductId = 1,
                            Amount = 2,
                            Price = 10000000m
                        },
                        new
                        {
                            OrderId = 4,
                            ProductId = 1,
                            Amount = 1,
                            Price = 10000000m
                        },
                        new
                        {
                            OrderId = 5,
                            ProductId = 3,
                            Amount = 1,
                            Price = 10000000m
                        },
                        new
                        {
                            OrderId = 5,
                            ProductId = 2,
                            Amount = 1,
                            Price = 10000000m
                        },
                        new
                        {
                            OrderId = 6,
                            ProductId = 3,
                            Amount = 1,
                            Price = 10000000m
                        });
                });

            modelBuilder.Entity("BKShop.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Capacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 3,
                            Capacity = "8/128",
                            CategoryId = 1,
                            Color = "Xanh",
                            Description = "Hệ thống camera sau được trang bị tối tân, trong đó có camera chính 64 MP, camera góc siêu rộng 8 MP và camera macro 2 MP cùng camera trước 32 MP luôn sẵn sàng bắt trọn mọi cảm xúc trong khung hình, giúp người dùng thoải mái ghi lại những khoảnh khắc trong cuộc sống một cách ấn tượng nhất.",
                            Image = "",
                            Name = "Oppo Reno 6Z 5G xanh",
                            Price = 1m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            Capacity = "4/64",
                            CategoryId = 1,
                            Color = "Đen",
                            Description = "Apple đã trang bị con chip mới nhất của hãng (tính đến 11/2020) cho iPhone 12 đó là A14 Bionic, được sản xuất trên tiến trình 5 nm với hiệu suất ổn định hơn so với chip A13 được trang bị trên phiên bản tiền nhiệm iPhone 11.",
                            Image = "",
                            Name = "Iphone 12 4/64 đen",
                            Price = 1m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            Capacity = "4/64",
                            CategoryId = 2,
                            Color = "Xanh",
                            Description = "Samsung chính thức trình làng mẫu máy tính bảng có tên Galaxy Tab S7 FE, máy trang bị cấu hình mạnh mẽ, màn hình giải trí siêu lớn và điểm ấn tượng nhất là viên pin siêu khủng được tích hợp bên trong, giúp tăng hiệu suất làm việc nhưng vẫn có tính di động cực cao. Galaxy Tab S7 FE sẽ khiến bạn choáng ngợp với dụng lượng pin cực khủng 10090 mAh đảm bảo cho cường độ làm việc, giải trí liên tục trong nhiều giờ liền.",
                            Image = "",
                            Name = "Samsung Galaxy Tab S7 FE xanh",
                            Price = 1m,
                            Stock = 10
                        });
                });

            modelBuilder.Entity("BKShop.Data.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Máy đẹp",
                            DateCreated = new DateTime(2022, 6, 20, 13, 3, 27, 322, DateTimeKind.Local).AddTicks(1631),
                            ProductId = 1,
                            Star = 5,
                            UserId = new Guid("bff91064-dc92-421e-a233-d1080f630928")
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Tuyệt lắm",
                            DateCreated = new DateTime(2022, 6, 20, 13, 3, 27, 323, DateTimeKind.Local).AddTicks(706),
                            ProductId = 1,
                            Star = 4,
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de")
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Máy hơi yếu",
                            DateCreated = new DateTime(2022, 6, 20, 13, 3, 27, 323, DateTimeKind.Local).AddTicks(728),
                            ProductId = 2,
                            Star = 2,
                            UserId = new Guid("bff91064-dc92-421e-a233-d1080f630928")
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Máy còn yếu lắm",
                            DateCreated = new DateTime(2022, 6, 20, 13, 3, 27, 323, DateTimeKind.Local).AddTicks(732),
                            ProductId = 2,
                            Star = 3,
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de")
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Ngon đó",
                            DateCreated = new DateTime(2022, 6, 20, 13, 3, 27, 323, DateTimeKind.Local).AddTicks(737),
                            ProductId = 2,
                            Star = 4,
                            UserId = new Guid("bff91064-dc92-421e-a233-d1080f630928")
                        },
                        new
                        {
                            Id = 6,
                            Comment = "Good",
                            DateCreated = new DateTime(2022, 6, 20, 13, 3, 27, 323, DateTimeKind.Local).AddTicks(740),
                            ProductId = 3,
                            Star = 5,
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de")
                        },
                        new
                        {
                            Id = 7,
                            Comment = "Yeah",
                            DateCreated = new DateTime(2022, 6, 20, 13, 3, 27, 323, DateTimeKind.Local).AddTicks(743),
                            ProductId = 3,
                            Star = 4,
                            UserId = new Guid("bff91064-dc92-421e-a233-d1080f630928")
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Đây là comment",
                            DateCreated = new DateTime(2022, 6, 20, 13, 3, 27, 323, DateTimeKind.Local).AddTicks(746),
                            ProductId = 3,
                            Star = 4,
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de")
                        },
                        new
                        {
                            Id = 9,
                            Comment = "Màu sắc đẹp",
                            DateCreated = new DateTime(2022, 6, 20, 13, 3, 27, 323, DateTimeKind.Local).AddTicks(748),
                            ProductId = 2,
                            Star = 5,
                            UserId = new Guid("bff91064-dc92-421e-a233-d1080f630928")
                        },
                        new
                        {
                            Id = 10,
                            Comment = "Máy mạnh",
                            DateCreated = new DateTime(2022, 6, 20, 13, 3, 27, 323, DateTimeKind.Local).AddTicks(751),
                            ProductId = 1,
                            Star = 5,
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de")
                        });
                });

            modelBuilder.Entity("BKShop.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "2ac8b042-6590-4c28-91a6-48370f6a4f9c",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("54ba416f-6b89-4c53-873d-4fbd48506e6d"),
                            ConcurrencyStamp = "d090169f-4e7c-41ed-96ff-faeab909a45c",
                            Description = "Customer role",
                            Name = "customer",
                            NormalizedName = "customer"
                        });
                });

            modelBuilder.Entity("BKShop.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            Address = "AG",
                            ConcurrencyStamp = "19e72c1e-71cc-40cf-a0a1-01c0cc640126",
                            Email = "khanh@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Bao Khanh",
                            NormalizedEmail = "khanh@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEMRHfyd9HVpOsBAv1PTzYcsL1YEfAyqJnZ8ZF9XjrQ5P3Yc8yj6mcRLdoy5K7Ynmew==",
                            Phone = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("bff91064-dc92-421e-a233-d1080f630928"),
                            AccessFailedCount = 0,
                            Address = "AG",
                            ConcurrencyStamp = "6ec6fd73-ee06-4396-bf87-b10ceceb9e50",
                            Email = "customer1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Bao Khanh Customer",
                            NormalizedEmail = "customer1@gmail.com",
                            NormalizedUserName = "customer",
                            PasswordHash = "AQAAAAEAACcQAAAAEItvOCe0/AYd6HRq9fp93VcTAmDuCRT20NnoQHG8q3nC2qaSK9YBrPbsHQwVWJLrrA==",
                            Phone = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "customer1"
                        },
                        new
                        {
                            Id = new Guid("bff91054-dc92-421e-a233-d1080f630928"),
                            AccessFailedCount = 0,
                            Address = "AG",
                            ConcurrencyStamp = "11e0f157-be9f-42bd-ac17-e3bdd5ea73ee",
                            Email = "customer2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "David",
                            NormalizedEmail = "customer2@gmail.com",
                            NormalizedUserName = "customer",
                            PasswordHash = "AQAAAAEAACcQAAAAEDVwbbC1gpxeRav1k2U6KK3irIsInCYrBSO0UoJ9neRZZfSckSlt1+wDyQ7YawlIzw==",
                            Phone = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "customer2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        },
                        new
                        {
                            UserId = new Guid("bff91064-dc92-421e-a233-d1080f630928"),
                            RoleId = new Guid("54ba416f-6b89-4c53-873d-4fbd48506e6d")
                        },
                        new
                        {
                            UserId = new Guid("bff91054-dc92-421e-a233-d1080f630928"),
                            RoleId = new Guid("54ba416f-6b89-4c53-873d-4fbd48506e6d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("BKShop.Data.Entities.Cart", b =>
                {
                    b.HasOne("BKShop.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BKShop.Data.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BKShop.Data.Entities.Order", b =>
                {
                    b.HasOne("BKShop.Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BKShop.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("BKShop.Data.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BKShop.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BKShop.Data.Entities.Product", b =>
                {
                    b.HasOne("BKShop.Data.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BKShop.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BKShop.Data.Entities.Review", b =>
                {
                    b.HasOne("BKShop.Data.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BKShop.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BKShop.Data.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BKShop.Data.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BKShop.Data.Entities.Product", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BKShop.Data.Entities.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
